buildscript {
    ext {
        springBootVersion = '3.1.4'
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        // Spring Boot Gradle 플러그인 및 Dependency Management 플러그인 추가
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.1.6"  // 최신 버전 사용 권장
    }
}

allprojects {

    // 모든 프로젝트에 Java, Spring Dependency Management, Spring Boot 플러그인 적용
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    group = 'com.lab'
    version = '1.0-SNAPSHOT'

    java {
        // Java 21 버전 설정
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

// root 프로젝트에서 build, bootJar, jar, assemble, compileJava 태스크 비활성화
tasks.named('build') {
    doLast {
        delete file("${project.rootDir}/build") // build 디렉토리 삭제
    }
}

['bootJar', 'jar', 'assemble', 'compileJava'].each { taskName ->
    tasks.named(taskName).configure { enabled = false }
}


project(':core') {
    // core 모듈에서 test 태스크 비활성화
    tasks.named('test') {
        enabled =   false
    }
}

subprojects {

    java {
        // Java 21 버전 설정
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        testCompileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {

        // Lombok을 모든 모듈에서 사용 가능하도록 설정
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Lombok을 테스트에서 사용
        // Lombok을 테스트에서 사용할 때 어노테이션 프로세서 적용
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        // jakarta.persistence-api 3.1.0 추가
        implementation "jakarta.persistence:jakarta.persistence-api:3.1.0"

        // Jakarta Persistence API 추가
        annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"

        // 기타 종속성
        implementation 'org.liquibase:liquibase-core:4.30.0'
        implementation 'org.apache.commons:commons-lang3:3.17.0'
        implementation 'org.apache.commons:commons-collections4:4.4'
        implementation 'com.mysql:mysql-connector-j:9.1.0'
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

        // 테스트 종속성 설정
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform() // JUnit 5 플랫폼 사용
    }

    // Java 컴파일 옵션 설정
    compileJava {
        options.encoding = 'UTF-8' // Java 소스 파일의 문자 인코딩을 UTF-8로 설정
    }
}

/* QueryDSL 라이브러리를 사용하는 모듈 리스트 정의 */
def querydslProjects = [project(":core"),
                        project(":api"),
                        project(":admin"),
                        project(":batch")]

configure(querydslProjects) {

    apply plugin: "io.spring.dependency-management"

    dependencies {
        // QueryDSL 종속성 추가
        implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        // Lombok 설정
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }

    def generatedDir = file("build/generated/sources/annotationProcessor/java/main")

    sourceSets {
        main {
            java {
                srcDirs +=  generatedDir // generated 폴더를 main 소스 세트로 추가
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.getGeneratedSourceOutputDirectory().set(file(generatedDir))
    }

    // clean 작업 시 generated 폴더 삭제
    clean.doLast {
        generatedDir.deleteDir()
    }
}
